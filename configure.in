#
# DST Janus Library (Janus DAVE-ML Interpreter Library)
#
# Defence Science and Technology (DST) Group
# Department of Defence, Australia.
# 506 Lorimer St
# Fishermans Bend, VIC
# AUSTRALIA, 3207
#
# Copyright 2005-2019 Commonwealth of Australia
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
# OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#


config_log="config.log"
config_args=$@

#
# Usage function.
#
usage() {
cat << _LT_EOF
'configure' configures the ${config_name} - based on your system.

Usage: configure [OPTION]... [VAR=VALUE]

Configuration:
  -h, --help      display this help and exit
  --env           display computed environment variables only and exit
  -v, --verbose   display computed environment variables

Fine tuning of the installation directories:

System types:
  --host=HOST   e.g. i686-w64-mingw32, x86_64-w64-mingw32, x86_64-linux

Optional Features:
  --enable-static
  --enable-shared
  --enable-staticprogs
  --disable-static
  --disable-shared
  --disable-sharedprogs
  
Optional Packages:
  --with-PACKAGE     e.g. zlib, qhull, openssl, matio, hdf5, netcdf, lua, fltkimages
  --without-PACKAGE  e.g. zlib, qhull, openssl, matio, hdf5, netcdf, lua, fltkimages

Some influential environment variables:
  MINGW_HOME  location of mingw32/64 folder
  GCC_HOME    location of gcc folder
  GCC_PATH    location of gcc binary 
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CPP         C preprocessor
  CXXCPP      C++ preprocessor
  
  WIN_PATHS   List of Windows folders to find gcc compiler
  LINUX_PATHS List of Linux folders to find gcc compiler
_LT_EOF
if [ "$(type -t doLocalUsage)" = "function" ]; then
  doLocalUsage
fi
}

#
# Process command line arguments.
#
WIN_PATHS="C: C:/Applications"
LINUX_PATHS="/usr/local /opt"
WIN32_HOST=no
enable_static=yes
enable_shared=no
enable_staticprogs=yes
without_qhull=yes

for i in "$@"; do
  case $i in
    -h|-help|--help)
      # unknown option
      usage
      exit 0
      ;;

    -rerun|--rerun)
      if [ -f $ac_makefileconfig ]; then
        config_args=$(grep configure_args $ac_makefileconfig)
        config_args=${config_args#configure_args=}
        eval ./${0##*/} ${config_args}
      else
        echo "Error: Run $0 without option \"$i\" first."
      fi
      exit 0
      ;;
      
    -env|--env)
      verbose=yes
      showEnvOnly=yes
      ;;

    -v|-verbose|--verbose)
      verbose=yes
      ;;

    host=*|-host=*|--host=*)
      host=${i#*=}
      ;;

    --enable-*)
      ac_envvar=enable_${i#--enable-}
      eval $ac_envvar="yes"
      export $ac_envvar
      export ac_envlist="${ac_envlist} $ac_envvar=yes"
      ;;

    --disable-*)
      ac_envvar=enable_${i#--disable-}
      eval $ac_envvar="no"
      export $ac_envvar
      export ac_envlist="${ac_envlist} $ac_envvar=no"
      ;;

    --with-*)
      ac_envvar=without_${i#--with-}
      eval $ac_envvar="no"
      export $ac_envvar
      export ac_envlist="${ac_envlist} $ac_envvar=no"
      ;;

    --without-*)
      ac_envvar=without_${i#--without-}
      eval $ac_envvar="yes"
      export $ac_envvar
      export ac_envlist="${ac_envlist} $ac_envvar=yes"
      ;;

    *=*)
      ac_envvar=${i%%=*}
      eval $ac_envvar=\${i#*=}
      export $ac_envvar
      export ac_envlist="${ac_envlist} $ac_envvar=${i#*=}"
      ;;
  
    *)
      # unknown option
      echo "configure: error: unrecognized option: ${i}"
      echo "Try '${0} --help' for more information"
      exit 1
      ;;
  esac
done

isFixedGCCPath() {
  if [ "${GCC_HOME}" != "" ] || [ "${GCC_PATH}" != "" ]; then
    return 0
  else
    return 1
  fi
}

getGCCHost() {
  gcc_host=$(${gcc_exe} -dumpmachine)
}

isTestHost() {
  if [ "${test_host}" == "" ]; then
    return 0
  fi
  getGCCHost
  if [ "${gcc_host}" != *"${test_host}"* ]; then
    return 0
  else
    return 1
  fi
}

getMinGWGCCPath() {
  case ${ac_kernel} in
    #
    # Looking for in WIN_PATHS:
    #   C:/mingw*/bin/${host_prefix}gcc
    #   C:/Applications/mingw*/bin/${host_prefix}gcc
    #
    CYGWIN*|MINGW*)
      if [ "${GCC_HOME}" != "" ]; then
        gcc_folders=${GCC_HOME}
      else
        for dir in ${WIN_PATHS}; do
          win_path="${dir}/"
          if [ -d ${win_path} ]; then
            gcc_folders=$(ls -1r ${win_path} | grep ${MINGW})
            if [ "${gcc_folders}" != "" ]; then
              break
            fi
          fi
        done
      fi
      for dir in ${gcc_folders}; do
        gcc_exe=${win_path}${dir}/bin/${host_prefix}gcc.exe
        if [ -e ${gcc_exe} ] && isTestHost; then
          GCC_PATH=${win_path}${dir}/bin
          prefix=${win_path}${dir}
          return
        fi
      done;
      if [ "${1}" != "fallthru" ]; then 
        echo "configure: error: can't find suitable Windows mingw installation to support '${test_host}' - ${host_prefix}gcc.exe"
        exit 1
      fi
      ;;

    #
    # Looking for gcc in LINUX_PATHS:
    #   /usr/local/gcc-x.y.z/bin/${host_prefix}gcc
    #   /usr/local/gcc-x.y.z/mingw*
    #   /opt/gcc-x.y.z/bin/${host_prefix}gcc
    #   /opt/gcc-x.y.z/mingw*
    #
    Linux)
      if [ "${GCC_HOME}" != "" ]; then
        gcc_folders=${GCC_HOME}
      else
        for dir in ${LINUX_PATHS}; do
          linux_path="${dir}/"
          if [ -d ${linux_path} ]; then
            gcc_folders=$(ls -1r ${linux_path} | grep gcc)
            if [ "${gcc_folders}" != "" ]; then
              break
            fi
          fi
        done
      fi
      for dir in ${gcc_folders}; do
        gcc_exe=${linux_path}${dir}/bin/${host_prefix}gcc
        if [ -e ${gcc_exe} ] && isTestHost; then
          GCC_PATH=${linux_path}${dir}/bin
          if [ -d ${linux_path}${dir}/${MINGW} ]; then
            prefix=${linux_path}${dir}/${MINGW}
          else
            prefix=${linux_path}${dir}
          fi
          return
        fi
      done;
      if [ "${1}" != "fallthru" ]; then 
        echo "configure: error: can't find suitable Linux mingw installation to support '${test_host}' - ${host_prefix}gcc"
        exit 1
      fi
      ;;
  esac 
}

getLinuxGCCPath() {
  if [ "${GCC_HOME}" != "" ]; then
    gcc_folders=${GCC_HOME}
  else
    for dir in ${LINUX_PATHS}; do
      linux_path="${dir}/"
      if [ -d ${linux_path} ]; then
        gcc_folders=$(ls -1r ${linux_path} | grep gcc)
        if [ "${gcc_folders}" != "" ]; then
          break
        fi
      fi
    done
  fi
  for dir in ${gcc_folders}; do
    gcc_exe=${linux_path}${dir}/bin/${host_prefix}gcc
    if [ -e ${gcc_exe} ] && isTestHost; then
      GCC_PATH=${linux_path}${dir}/bin
      prefix=${linux_path}${dir}
      return
    fi
  done;
  if [ "${1}" != "fallthru" ]; then 
    echo "configure: error: can't find suitable Linux installation to support '${test_host}' - ${host_prefix}gcc"
    exit 1
  fi
}

getGCCPath() {
  #
  # Is gcc in the path?
  #
  if [ "${GCC_HOME}" != "" ]; then
    gcc_exe=${GCC_HOME}/bin/${host_prefix}gcc${exe_ext}
  elif [ "${GCC_PATH}" != "" ]; then
    gcc_exe=${GCC_PATH}/${host_prefix}gcc${exe_ext}
  else
    gcc_exe=$(which ${host_prefix}gcc${exe_ext} 2>/dev/null)
  fi
  
  if [ "${gcc_exe}" != "" ] && [ -e ${gcc_exe} ]; then
    if ! isTestHost && isFixedGCCPath; then
      echo "configure: error: ${gcc_exe} has host target of '${gcc_host}' not requested '${host}'."
      exit 1
    fi
    case ${ac_kernel} in
      CYGWIN*)
        GCC_PATH=$(cygpath -m ${gcc_exe%/*})
        ;;
      *)
        GCC_PATH=${gcc_exe%/*}
        ;;
    esac
    prefix=${GCC_PATH%/bin}
    return 0
  elif isFixedGCCPath; then
    echo "configure: error: Can't find compiler ${gcc_exe}."
    exit 1
  fi

  #
  # Try to find it elsewhere in the system, if not fixed path.
  #
  if [ "${MINGW}" != "" ]; then
    getMinGWGCCPath
  else
    case ${ac_kernel} in
      CYGWIN*|MINGW*)
        getLinuxGCCPath "fallthru"
        MINGW=mingw
        test_host=mingw32
        getMinGWGCCPath
        ;;
      *)
        getLinuxGCCPath
        ;;
     esac
  fi
    
  if [ "${GCC_PATH}" != "" ]; then
    gcc_exe=${GCC_PATH}/${host_prefix}gcc${exe_ext}
    if ! isTestHost; then
      echo "configure: error: ${gcc_exe} has host target of '${gcc_host}' not requested '${host}'."
      exit 1
    fi
    return 0
  fi
  
  # Could not find it.
  echo "configure: error: Can't find compiler ${host_prefix}gcc${exe_ext}."
  exit 1
}

doDetermineEnvironment() {
  #
  # System
  #
  ac_kernel=$(uname -s)
  ac_arch=$(uname -m)
  case ${ac_kernel} in
    MINGW*|CYGWIN*)
      exe_ext=".exe"
      ;;
  esac
  
  #
  # MinGW type.
  #
  case ${MINGW} in
    mingw32|native32)
      MINGW=mingw32
      test_host=i686-w64-mingw32
      ;;
    mingw64|native64)
      MINGW=mingw64
      test_host=x86_64-w64-mingw32
      ;;
    auto)
      MINGW=mingw
      test_host=mingw32
      ;;
  esac
  
  #
  # Update host variable.
  #
  if [ "${host}" == "" ] && [ "${MACHINE}" != "" ]; then
    host=${MACHINE}
  fi
  case ${host} in
    Xi686|i686-w64-mingw32)
      MINGW=mingw32
      test_host=i686-w64-mingw32
      host=${test_host}
      ;;
    Xx86_64|x86_64-w64-mingw32)
      MINGW=mingw64
      test_host=x86_64-w64-mingw32
      host=${test_host}
      ;;
  esac
  case ${ac_kernel} in
    Linux)
      if [ "${host}" == "" ] && [ "${test_host}" != "" ] && [ "${MINGW}" != "mingw" ]; then
        host=${test_host}
      fi
      ;;
  esac
  if [ "${host}" != "" ]; then
    host_prefix=${host%%-}-
  fi
  
  #
  # Find GCC
  #
  getGCCPath
  
  #
  # Define prefix.
  #
  if [ "${prefix}" == "" ]; then 
    if [ "${MINGW_HOME}" != "" ]; then
      prefix=${MINGW_HOME}
    else
      prefix=${GCC_PATH%bin/*}
    fi
  fi
  
  #
  # Are we compiling for Windows (native or cross).
  #
  getGCCHost
  if [ "${gcc_host/mingw}" != "${gcc_host}" ]; then
    WIN32_HOST=yes
    case ${ac_kernel} in
      Linux)
        if [ "${MINGW_HOME}" != "" ]; then
          prefix=${MINGW_HOME}
        elif [ "${GCC_PATH}" != "" ]; then
          MINGW_HOME=${GCC_PATH%/bin}/${MINGW}
          prefix=${MINGW_HOME}
        fi
        ;;
    esac
  fi

  #
  # Update system PATH given gcc path.
  #
  if [ "${GCC_PATH}" != "" ]; then
    case ${ac_kernel} in
      CYGWIN*)
        export PATH=$(cygpath ${GCC_PATH}):${PATH}
        ;;
      *)
        export PATH=${GCC_PATH}:${PATH}
        ;;
    esac
    gcc_prefix=${GCC_PATH}/${host_prefix}
  else
    gcc_prefix=${host_prefix}
  fi
}

doBuildGccVariables() {
  CC=${gcc_prefix}gcc${exe_ext}
  CXX=${gcc_prefix}g++${exe_ext}
  CPP=${gcc_prefix}cpp${exe_ext}
  FC=${gcc_prefix}gfortran${exe_ext}
  LD=${gcc_prefix}ld${exe_ext}
  RANLIB=${gcc_prefix}ranlib${exe_ext}
  STRIP=${gcc_prefix}strip${exe_ext}
  WINDMC=${gcc_prefix}windmc${exe_ext}
  WINDRES=${gcc_prefix}windres${exe_ext}
  CPPFLAGS+=" -I${prefix}/local/include -I${prefix}/include"
  LDFLAGS+=" -L${prefix}/local/lib -L${prefix}/lib"
  
  ADDR2LINE=${gcc_prefix}addr2line${exe_ext}
  AR=${gcc_prefix}ar${exe_ext}
  AS=${gcc_prefix}as${exe_ext}
  DLLTOOL=${gcc_prefix}dlltool${exe_ext}
  DLLWRAP=${gcc_prefix}dllwrap${exe_ext}
  GCONV=${gcc_prefix}gcov${exe_ext}
  GPROF=${gcc_prefix}gprof${exe_ext}
  NM=${gcc_prefix}nm${exe_ext}
  OBJCOPY=${gcc_prefix}objcopy${exe_ext}
  OBJDUMP=${gcc_prefix}objdump${exe_ext}
  SIZE=${gcc_prefix}size${exe_ext}
  STRINGS=${gcc_prefix}strings${exe_ext}
}

getLib() {
  if [ "${WIN32_HOST}" == "yes" ] && [ "${enable_staticprogs}" == "yes" ]; then
    echo "-l:lib${1}.a"
  else
    echo "-l${1}"
  fi
}

doBaseDependencies() {
  ARFLAGS=crs
  CP="cp -f"
  RM="rm -f"
  CD=cd
  MKDIR="mkdir -p"
  LIBCP=${CP}
  FIND=find
  
  CXXLIBS="-lstdc++ -lm"

  if [ "${HAVE_ZLIB}" == "yes" ]; then
    Z_LIBS=$(getLib z)
  fi
  
  if [ "${HAVE_DLFCN}" == "yes" ]; then
    DLFCN_LIBS=$(getLib dl)
  fi

  if [ "${HAVE_LIBPNG}" == "yes" ]; then
    PNG_LIBS=$(getLib png)
  fi
  
  if [ "${HAVE_OPENSSL}" == "yes" ]; then
    CRYPTO_LIBS=$(getLib crypto)
    OPENSSL_LIBS="$(getLib ssl) ${CRYPTO_LIBS}"
  fi
  
  if [ "${HAVE_QHULL7}${HAVE_QHULL6}${HAVE_QHULL5}" == "yes" ]; then
    ## Windows Qhull
    if [ "${WIN32_HOST}" == "yes" ]; then
      if [ "${HAVE_QHULL7}" == "yes" ]; then
        QHULL_LIBS="$(getLib qhullcpp) $(getLib qhull_r)"
      elif [ "${HAVE_QHULL6}" == "yes" ]; then
          QHULL_LIBS="$(getLib qhullcpp) $(getLib qhull)"
      elif [ "${HAVE_QHULL5}" == "yes" ]; then
        QHULL_LIBS=$(getLib qhull)
      fi

    ## Linux Qhull (Ubuntu) tends to just have a libqhull.a/so for entire library.
    else
      if [ "$(whereis -b libqhullcpp.a | cut -d' ' -f3)" == "" ]; then
        QHULL_LIBS="$(getLib qhull)"
      else
        QHULL_LIBS="$(getLib qhullcpp) $(getLib qhull)"
      fi
    fi
  else
    CPPFLAGS="-I\$(PARENT_DIR)/../Janus/ThirdParty/qhull/src ${CPPFLAGS}"
  fi
  
  
  if [ "${HAVE_HDF5}" == "yes" ]; then
    HDF5_LIBS="$(getLib hdf5_cpp) $(getLib hdf5) $(getLib sz)"
  fi
  
  if [ "${HAVE_NETCDF}" == "yes" ]; then
    NETCDF_LIBS=$(getLib netcdf)
  fi
  
  if [ "${HAVE_KAGUYA}" == "yes" ]; then
    if [ "${USE_UTE_KAGUYA}" != "yes" ]; then
      LUA_LIBS="$(getLib lua)"
    fi
  fi

  if [ "${HAVE_MATIO}" == "yes" ]; then
    MATIO_LIBS=$(getLib matio)
  fi
  
  GTEST_LIBS="$(getLib gtest) $(getLib gtest_main) -pthread"
  VALGRIND=valgrind
  VGFLAGS="--tool=memcheck -v --demangle=yes --trace-children=yes --num-callers=30 --leak-check=yes --leak-resolution=high --show-reachable=yes --error-limit=no"
}

doWin32Dependencies() {
  doBaseDependencies
  
  exe_ext=.exe
  so_ext=.dll
  so_exta=.dll
  MAKE=make
  LN=${CP}
  LN_PROG=${CP}
  
  LDLIBS+=" -lmingwex"
  
  GL_LIBS="$(getLib glu32) $(getLib opengl32) $(getLib ole32) $(getLib uuid) $(getLib comctl32) $(getLib wsock32) $(getLib supc++)"
  GLUT_LIBS=$(getLib glut32)
  TRANSPORT_EXTRAS=$(getLib wsock32)
  if [ "${HAVE_OPENSSL}" == "yes" ]; then
    CRYPTO_LIBS+=" $(getLib gdi32) $(getLib psapi)"
    OPENSSL_LIBS+=" $(getLib gdi32) $(getLib psapi)"
  fi
}

doLinuxDependencies() {
  doBaseDependencies

  so_ext=.so
  so_exta=.so*
  MAKE=make
  LN="ln -sf"
  LN_PROG=${LN}

  TRANSPORT_EXTRAS=-lpthread

  GL_LIBS="-lGLU -lGL -lX11 -lXext -lm"
  GLUT_LIBS=-lglut
  X_LIBS="-lX11 -lXext -lm"
  XPM_LIBS=-lXpm
}

doSystemDependencies() {
  if [ "${WIN32_HOST}" == "yes" ]; then
    doWin32Dependencies
  else
    doLinuxDependencies
  fi
}

doShowInfo() {
  #
  # Show configuration environment.
  #
  if [ "${verbose}" == "yes" ]; then
    cat << _LT_EOF
sys_kernel=${ac_kernel%%_*}
sys_arch=${ac_arch}
MINGW=${MINGW}
MINGW_HOME=${MINGW_HOME}
WIN32_HOST=${WIN32_HOST}
GCC_PATH=${GCC_PATH}
host=${host}
host_prefix=${host_prefix}
prefix=${prefix}
CC=${CC}
CXX=${CXX}
CPPFLAGS=${CPPFLAGS}
C11FLAGS=${C11FLAGS}
LDLIBS=${LDLIBS}
WIN_PATHS=${WIN_PATHS}
LINUX_PATHS=${LINUX_PATHS}
_LT_EOF

    if [ "${showEnvOnly}" == "yes" ]; then
      exit 0
    else
      echo ----------
    fi
  fi
  
  #
  # config_log
  #
  cat << _LT_EOF > ${config_log}
sys_kernel=${ac_kernel%%_*}
sys_arch=${ac_arch}
MINGW=${MINGW}
MINGW_HOME=${MINGW_HOME}
GCC_PATH=${GCC_PATH}
host=${host}
host_prefix=${host_prefix}
prefix=${prefix}
CC=${CC}
CXX=${CXX}
CPPFLAGS=${CPPFLAGS}
C11FLAGS=${C11FLAGS}
LDLIBS=${LDLIBS}
PATH=${PATH}
----------
_LT_EOF
}

#
# Utility functions.
#
doSetEnv() {
  eval ${1}=${2}
  echo "  #define ${1} 1" >> $ac_configfile
  echo "${1}=${2}" >> $ac_makefileconfig
}

doLibraryTest() {
  echo -n "Checking for lib$2 ... "
  echo -n "lib$2: " >> ${config_log}

  cat > conftest.$ac_ext <<_LT_EOF
#include <stdio.h>
$3
int main(){return(0);}
_LT_EOF

  if [ "${verbose}" == "yes" ]; then
    echo
    echo $ac_compile
    (eval $ac_compile)
  else
    (eval $ac_compile) > /dev/null 2>&1
  fi
  ac_status=$?
  if [ $ac_status -eq 0 ]; then
    echo "yes"
    echo "  #define $1 1" >> $ac_configfile
    echo "${1}=yes" >> $ac_makefileconfig
    echo "yes" >> ${config_log}

    # Put test variable into the local environment.
    eval ${1}=yes
    export ${1}
  else
    echo "no"
    echo "no" >> ${config_log}
  fi
}

doRunTests() {
  #
  # Run the tests
  #
  # zlib
  if [ "${without_zlib}" != "yes" ]; then
    ac_ext=cpp
    ac_compile="$CXX $CXXFLAGS $CPPFLAGS -c conftest.$ac_ext"
    doLibraryTest HAVE_ZLIB z "#include <zlib.h>"
  fi
  
  # dlfcn
  if [ "${without_dlfnc}" != "yes" ]; then
    ac_ext=cpp
    ac_compile="$CXX $CXXFLAGS $CPPFLAGS -c conftest.$ac_ext"
    doLibraryTest HAVE_DLFCN dl "#include <dlfcn.h>"
  fi
  
  # openssl
  if [ "${without_openssl}" != "yes" ]; then
    ac_ext=cpp
    ac_compile="$CXX $CXXFLAGS $CPPFLAGS -c conftest.$ac_ext"
    doLibraryTest HAVE_OPENSSL crypt "#include <openssl/evp.h>;#include <openssl/rsa.h>;#include <openssl/aes.h>;#include <openssl/pem.h>;#include <openssl/rand.h>"
  fi

  # matio
  if [ "${without_matio}" != "yes" ]; then
    ac_ext=cpp
    ac_compile="$CXX $CXXFLAGS $CPPFLAGS -c conftest.$ac_ext"
    doLibraryTest HAVE_MATIO matio "#include <matio.h>"
  fi
  
  # qhull
  if [ "${without_qhull}" != "yes" ]; then
    ac_ext=c
    ac_compile="$CC $CFLAGS $CPPFLAGS -c conftest.$ac_ext"
    doLibraryTest HAVE_QHULL7 qhull7 "#include <libqhull_r/libqhull_r.h>"
    if [ "${HAVE_QHULL7}" != "yes" ]; then
      doLibraryTest HAVE_QHULL6 qhull6 "#include <libqhull/libqhull.h>"
      if [ "${HAVE_QHULL6}" != "yes" ]; then
        doLibraryTest HAVE_QHULL5 qhull5 "#include <qhull/qhull.h>"
      fi
    fi
  fi

  # hdf5
  if [ "${without_hdf5}" != "yes" ]; then
    ac_ext=cpp
    ac_compile="$CXX $CXXFLAGS $CPPFLAGS -c conftest.$ac_ext"
    doLibraryTest HAVE_HDF5 hdf5 "#include <H5Cpp.h>"
  fi

  # netcdf
  if [ "${without_netcdf}" != "yes" ]; then
    ac_ext=cpp
    ac_compile="$CXX $CXXFLAGS $CPPFLAGS -c conftest.$ac_ext"
    doLibraryTest HAVE_NETCDF netcdf "#include <netcdf.h>"
  fi

  # lua/kaguya
  if [ "${without_lua}" != "yes" ] && [ "${HAVE_DLFCN}" == "yes" ]; then
    C11FLAGS="-std=c++11"
    ac_ext=cpp
    ac_compile="$CXX $CXXFLAGS $CPPFLAGS $C11FLAGS -c conftest.$ac_ext"
    doLibraryTest HAVE_KAGUYA_SYSTEM lua "#include <kaguya/kaguya.hpp>"
    if [ "${HAVE_KAGUYA_SYSTEM}" != "yes" ]; then
      doSetEnv USE_UTE_KAGUYA yes
      doSetEnv HAVE_KAGUYA yes
      echo " -- Ute liblua / kaguya ... yes"
      echo " -- Ute liblua: yes" >> ${config_log}
    fi
  fi

  # Fltk Images
  if [ "${without_fltkimages}" != "yes" ]; then
    ac_ext=cpp
    ac_compile="$CXX $CXXFLAGS $CPPFLAGS -c conftest.$ac_ext"
    doLibraryTest HAVE_FLTKIMAGES fltkimages "#include <FL/images/png.h>"
  fi
  
  # libpng
  if [ "${without_libpng}" != "yes" ]; then
    ac_ext=cpp
    ac_compile="$CXX $CXXFLAGS $CPPFLAGS -c conftest.$ac_ext"
    doLibraryTest HAVE_LIBPNG png "#include <png.h>"
  fi
}

doOpenConfigFile() {
  ac_library_name=${config_name%%\ *}
  ac_library_NAME=${ac_library_name^^*}
  if git --version >/dev/null 2>&1; then
    ac_git_revision_count=$(git rev-list HEAD --count)
    ac_git_branch=$(git rev-parse --abbrev-ref HEAD)
    ac_git_commit=$(git log -n 1 --pretty=format:"%cd (%H)" --date=short)
  fi
  cat << _LT_EOF > $ac_configfile
#ifndef $ac_configfile_header
#define $ac_configfile_header
  #define ${ac_library_NAME}_LIBRARY_NAME "$ac_library_name"
  #define ${ac_library_NAME}_LIBRARY_DESCRIPTION "$config_name"
  #define ${ac_library_NAME}_VERSION $config_version_hex
  #define ${ac_library_NAME}_VERSION_HEX "$config_version_hex"
  #define ${ac_library_NAME}_VERSION_SHORT "$config_version_dec"
  #define ${ac_library_NAME}_VERSION_LONG "$ac_library_name-$config_version_dec"
  #define ${ac_library_NAME}_REVISION "$config_version_dec.$ac_git_revision_count"
  #define ${ac_library_NAME}_REVISION_COUNT $ac_git_revision_count
  #define ${ac_library_NAME}_REVISION_INFO "$ac_git_branch $ac_git_commit"

_LT_EOF

  cat << _LT_EOF > $ac_makefileconfig
${ac_library_NAME}_LIBRARY_NAME=$ac_library_name
${ac_library_NAME}_VERSION_SHORT=$config_version_dec
${ac_library_NAME}_VERSION_MAJOR=${config_version_dec%%.*}
${ac_library_NAME}_VERSION_MINOR=${config_version_dec#*.}

configure_args=${config_args}

_LT_EOF
}

envContainsElement () {
  local e
  for e in ${ac_envlist}; do [[ "${e%%=*}" == "$1" ]] && return 0; done
  return 1
}

doCloseConfigFile() {
  echo "#endif /* $ac_configfile_header */" >> $ac_configfile
  
  # Add local variables to ac_envlist if not already there.
  localEnv="WIN32_HOST enable_static enable_shared enable_staticprogs"
  for var in $localEnv; do
    if ! envContainsElement ${var}; then
      export ac_envlist="${ac_envlist} ${var}=$(eval echo \$${var})"
    fi
  done

  # Save passed environment vaiables.
  for var in $ac_envlist; do
    echo ${var} >> $ac_makefileconfig
  done
  cat << _LT_EOF >> $ac_makefileconfig

prefix=${prefix}/local
bindir=${prefix}/local/bin
libdir=${prefix}/local/lib
includedir=${prefix}/local/include

CC=${CC}
CXX=${CXX}
CPP=${CPP}
FC=${FC}
LD=${LD}
RANLIB=${RANLIB}
STRIP=${STRIP}
WINDMC=${WINDMC}
WINDRES=${WINDRES}
CPPFLAGS+=${CPPFLAGS}
C11FLAGS+=${C11FLAGS}
LDFLAGS+=${LDFLAGS}
LDLIBS+=${LDLIBS}
CXXLIBS+=${CXXLIBS}
ARFLAGS=${ARFLAGS}

ADDR2LINE=${ADDR2LINE}
AR=${AR}
AS=${AS}
DLLTOOL=${DLLTOOL}
DLLWRAP=${DLLWRAP}
GCONV=${GCONV}
GPROF=${GPROF}
NM=${NM}
OBJCOPY=${OBJCOPY}
OBJDUMP=${OBJDUMP}
SIZE=${SIZE}
STRINGS=${STRINGS}

sys_kernel=${ac_kernel%%_*}
sys_arch=${ac_arch}
EXE_EXT=${exe_ext}
SO_EXT=${so_ext}
SO_EXTA=${so_exta}
MINGW=${MINGW}
MINGW_HOME=${MINGW_HOME}

CP=${CP}
RM=${RM}
CD=${CD}
LN=${LN}
LN_PROG=${LN_PROG}
MKDIR=${MKDIR}
LIBCP=${LIBCP}
FIND=${FIND}
###MAKE=${MAKE}
Z_LIBS=${Z_LIBS}
PNG_LIBS=${PNG_LIBS}
CRYPTO_LIBS=${CRYPTO_LIBS}
OPENSSL_LIBS=${OPENSSL_LIBS}
MATIO_LIBS=${MATIO_LIBS}
QHULL_LIBS=${QHULL_LIBS}
HDF5_LIBS=${HDF5_LIBS}
NETCDF_LIBS=${NETCDF_LIBS}
LUA_LIBS=${LUA_LIBS}
DLFCN_LIBS=${DLFCN_LIBS}

GL_LIBS=${GL_LIBS}
GLUT_LIBS=${GLUT_LIBS}

TRANSPORT_EXTRAS=${TRANSPORT_EXTRAS}

GTEST_LIBS=${GTEST_LIBS}
VALGRIND=${VALGRIND}
VGFLAGS=${VGFLAGS}
FLUID=${prefix}/local/bin/fluid${exe_ext}
FLTKCONFIG=${prefix}/local/bin/fltk-config
SDLCONFIG=${prefix}/local/bin/sdl2-config
_LT_EOF

  if [ "${WIN32_HOST}" != "yes" ]; then
    cat << _LT_EOF >> $ac_makefileconfig

X_LIBS=${X_LIBS}
XPM_LIBS=${XPM_LIBS}
_LT_EOF
  fi
}

#
# Run this script in the configure script folder location.
# (script may be run from other folders)
#
doDetermineEnvironment
doBuildGccVariables
doShowInfo
doOpenConfigFile
if [ "$(type -t doPreConfigure)" = "function" ]; then
  doPreConfigure
fi
doRunTests
if [ "$(type -t doPostConfigure)" = "function" ]; then
  doPostConfigure
fi
doSystemDependencies
doCloseConfigFile
rm -f conftest.c conftest.cpp conftest.o
